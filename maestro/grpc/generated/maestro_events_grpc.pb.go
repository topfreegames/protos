// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCForwarderClient is the client API for GRPCForwarder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCForwarderClient interface {
	SendRoomInfo(ctx context.Context, in *RoomInfo, opts ...grpc.CallOption) (*Response, error)
	SendRoomStatus(ctx context.Context, in *RoomStatus, opts ...grpc.CallOption) (*Response, error)
	SendRoomPing(ctx context.Context, in *Room, opts ...grpc.CallOption) (*Response, error)
	SendRoomResync(ctx context.Context, in *RoomStatus, opts ...grpc.CallOption) (*Response, error)
	SendRoomEvent(ctx context.Context, in *RoomEvent, opts ...grpc.CallOption) (*Response, error)
	SendPlayerEvent(ctx context.Context, in *PlayerEvent, opts ...grpc.CallOption) (*Response, error)
}

type gRPCForwarderClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCForwarderClient(cc grpc.ClientConnInterface) GRPCForwarderClient {
	return &gRPCForwarderClient{cc}
}

func (c *gRPCForwarderClient) SendRoomInfo(ctx context.Context, in *RoomInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/eventforwarder.GRPCForwarder/SendRoomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCForwarderClient) SendRoomStatus(ctx context.Context, in *RoomStatus, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/eventforwarder.GRPCForwarder/SendRoomStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCForwarderClient) SendRoomPing(ctx context.Context, in *Room, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/eventforwarder.GRPCForwarder/SendRoomPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCForwarderClient) SendRoomResync(ctx context.Context, in *RoomStatus, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/eventforwarder.GRPCForwarder/SendRoomResync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCForwarderClient) SendRoomEvent(ctx context.Context, in *RoomEvent, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/eventforwarder.GRPCForwarder/SendRoomEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCForwarderClient) SendPlayerEvent(ctx context.Context, in *PlayerEvent, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/eventforwarder.GRPCForwarder/SendPlayerEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCForwarderServer is the server API for GRPCForwarder service.
// All implementations must embed UnimplementedGRPCForwarderServer
// for forward compatibility
type GRPCForwarderServer interface {
	SendRoomInfo(context.Context, *RoomInfo) (*Response, error)
	SendRoomStatus(context.Context, *RoomStatus) (*Response, error)
	SendRoomPing(context.Context, *Room) (*Response, error)
	SendRoomResync(context.Context, *RoomStatus) (*Response, error)
	SendRoomEvent(context.Context, *RoomEvent) (*Response, error)
	SendPlayerEvent(context.Context, *PlayerEvent) (*Response, error)
	mustEmbedUnimplementedGRPCForwarderServer()
}

// UnimplementedGRPCForwarderServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCForwarderServer struct {
}

func (UnimplementedGRPCForwarderServer) SendRoomInfo(context.Context, *RoomInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoomInfo not implemented")
}
func (UnimplementedGRPCForwarderServer) SendRoomStatus(context.Context, *RoomStatus) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoomStatus not implemented")
}
func (UnimplementedGRPCForwarderServer) SendRoomPing(context.Context, *Room) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoomPing not implemented")
}
func (UnimplementedGRPCForwarderServer) SendRoomResync(context.Context, *RoomStatus) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoomResync not implemented")
}
func (UnimplementedGRPCForwarderServer) SendRoomEvent(context.Context, *RoomEvent) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoomEvent not implemented")
}
func (UnimplementedGRPCForwarderServer) SendPlayerEvent(context.Context, *PlayerEvent) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayerEvent not implemented")
}
func (UnimplementedGRPCForwarderServer) mustEmbedUnimplementedGRPCForwarderServer() {}

// UnsafeGRPCForwarderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCForwarderServer will
// result in compilation errors.
type UnsafeGRPCForwarderServer interface {
	mustEmbedUnimplementedGRPCForwarderServer()
}

func RegisterGRPCForwarderServer(s grpc.ServiceRegistrar, srv GRPCForwarderServer) {
	s.RegisterService(&GRPCForwarder_ServiceDesc, srv)
}

func _GRPCForwarder_SendRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCForwarderServer).SendRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventforwarder.GRPCForwarder/SendRoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCForwarderServer).SendRoomInfo(ctx, req.(*RoomInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCForwarder_SendRoomStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCForwarderServer).SendRoomStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventforwarder.GRPCForwarder/SendRoomStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCForwarderServer).SendRoomStatus(ctx, req.(*RoomStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCForwarder_SendRoomPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCForwarderServer).SendRoomPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventforwarder.GRPCForwarder/SendRoomPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCForwarderServer).SendRoomPing(ctx, req.(*Room))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCForwarder_SendRoomResync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCForwarderServer).SendRoomResync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventforwarder.GRPCForwarder/SendRoomResync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCForwarderServer).SendRoomResync(ctx, req.(*RoomStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCForwarder_SendRoomEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCForwarderServer).SendRoomEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventforwarder.GRPCForwarder/SendRoomEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCForwarderServer).SendRoomEvent(ctx, req.(*RoomEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCForwarder_SendPlayerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCForwarderServer).SendPlayerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventforwarder.GRPCForwarder/SendPlayerEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCForwarderServer).SendPlayerEvent(ctx, req.(*PlayerEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCForwarder_ServiceDesc is the grpc.ServiceDesc for GRPCForwarder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCForwarder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventforwarder.GRPCForwarder",
	HandlerType: (*GRPCForwarderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRoomInfo",
			Handler:    _GRPCForwarder_SendRoomInfo_Handler,
		},
		{
			MethodName: "SendRoomStatus",
			Handler:    _GRPCForwarder_SendRoomStatus_Handler,
		},
		{
			MethodName: "SendRoomPing",
			Handler:    _GRPCForwarder_SendRoomPing_Handler,
		},
		{
			MethodName: "SendRoomResync",
			Handler:    _GRPCForwarder_SendRoomResync_Handler,
		},
		{
			MethodName: "SendRoomEvent",
			Handler:    _GRPCForwarder_SendRoomEvent_Handler,
		},
		{
			MethodName: "SendPlayerEvent",
			Handler:    _GRPCForwarder_SendPlayerEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maestro/grpc/protobuf/maestro_events.proto",
}
