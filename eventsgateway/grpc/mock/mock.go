// Code generated by MockGen. DO NOT EDIT.
// Source: eventsgateway/grpc/generated/events.pb.go

// Package mock_eventsgateway is a generated GoMock package.
package mock_eventsgateway

import (
	generated "github.com/topfreegames/protos/eventsgateway/grpc/generated"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockGRPCForwarderClient is a mock of GRPCForwarderClient interface
type MockGRPCForwarderClient struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCForwarderClientMockRecorder
}

// MockGRPCForwarderClientMockRecorder is the mock recorder for MockGRPCForwarderClient
type MockGRPCForwarderClientMockRecorder struct {
	mock *MockGRPCForwarderClient
}

// NewMockGRPCForwarderClient creates a new mock instance
func NewMockGRPCForwarderClient(ctrl *gomock.Controller) *MockGRPCForwarderClient {
	mock := &MockGRPCForwarderClient{ctrl: ctrl}
	mock.recorder = &MockGRPCForwarderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGRPCForwarderClient) EXPECT() *MockGRPCForwarderClientMockRecorder {
	return m.recorder
}

// SendEvent mocks base method
func (m *MockGRPCForwarderClient) SendEvent(ctx context.Context, in *generated.Event, opts ...grpc.CallOption) (*generated.SendEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEvent", varargs...)
	ret0, _ := ret[0].(*generated.SendEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEvent indicates an expected call of SendEvent
func (mr *MockGRPCForwarderClientMockRecorder) SendEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockGRPCForwarderClient)(nil).SendEvent), varargs...)
}

// SendEvents mocks base method
func (m *MockGRPCForwarderClient) SendEvents(ctx context.Context, in *generated.SendEventsRequest, opts ...grpc.CallOption) (*generated.SendEventsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEvents", varargs...)
	ret0, _ := ret[0].(*generated.SendEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEvents indicates an expected call of SendEvents
func (mr *MockGRPCForwarderClientMockRecorder) SendEvents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvents", reflect.TypeOf((*MockGRPCForwarderClient)(nil).SendEvents), varargs...)
}

// MockGRPCForwarderServer is a mock of GRPCForwarderServer interface
type MockGRPCForwarderServer struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCForwarderServerMockRecorder
}

// MockGRPCForwarderServerMockRecorder is the mock recorder for MockGRPCForwarderServer
type MockGRPCForwarderServerMockRecorder struct {
	mock *MockGRPCForwarderServer
}

// NewMockGRPCForwarderServer creates a new mock instance
func NewMockGRPCForwarderServer(ctrl *gomock.Controller) *MockGRPCForwarderServer {
	mock := &MockGRPCForwarderServer{ctrl: ctrl}
	mock.recorder = &MockGRPCForwarderServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGRPCForwarderServer) EXPECT() *MockGRPCForwarderServerMockRecorder {
	return m.recorder
}

// SendEvent mocks base method
func (m *MockGRPCForwarderServer) SendEvent(arg0 context.Context, arg1 *generated.Event) (*generated.SendEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", arg0, arg1)
	ret0, _ := ret[0].(*generated.SendEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEvent indicates an expected call of SendEvent
func (mr *MockGRPCForwarderServerMockRecorder) SendEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockGRPCForwarderServer)(nil).SendEvent), arg0, arg1)
}

// SendEvents mocks base method
func (m *MockGRPCForwarderServer) SendEvents(arg0 context.Context, arg1 *generated.SendEventsRequest) (*generated.SendEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvents", arg0, arg1)
	ret0, _ := ret[0].(*generated.SendEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEvents indicates an expected call of SendEvents
func (mr *MockGRPCForwarderServerMockRecorder) SendEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvents", reflect.TypeOf((*MockGRPCForwarderServer)(nil).SendEvents), arg0, arg1)
}
